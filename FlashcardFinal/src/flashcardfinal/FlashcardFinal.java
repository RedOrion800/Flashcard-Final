/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package flashcardfinal;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Sam
 */
public class FlashcardFinal extends javax.swing.JFrame {

    Flashcard aCard;
    String line;
    FileSystem fs;
    Path pathToFile;
    String selectedFile;
    InputStream cardln = null;
    BufferedReader cardReader;
    JFileChooser saveChooser = new JFileChooser();
    File saveFile = null;
    File displayFile = null;
    ArrayList<Flashcard> displayCards = new ArrayList<Flashcard>();
    ArrayList<Flashcard> saveCards = new ArrayList<Flashcard>();
    int index = 0;

    /**
     * Creates new form FlashcardFinal
     */
    public void showRecord() {
        TextAreaField.setText(displayCards.get(index).getTerm());
        this.TermLabel.setText("Card # " + (index + 1));
    }

    public void updateRecord() {
        saveCards.add(new Flashcard(termField.getText(), defField.getText()));

    }

    public void writeToFile() {
        String outputLine = "";

        try {
            FileWriter fileOut = new FileWriter(saveFile);

            for (int x = 0; x < saveCards.size(); x++) {
                outputLine = String.format("%s,%s\n", saveCards.get(x).getTerm(), saveCards.get(x).getDefinition());
                fileOut.write(outputLine);
            }
            fileOut.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Cannot write flashcards\n" + ex.getMessage(), "File IO Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    public FlashcardFinal() {
        initComponents();
        this.TermLabel.setText("Card # " + (index + 1));
        this.setTitle("Flashcards");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPanel = new javax.swing.JTabbedPane();
        displayPanel = new javax.swing.JPanel();
        displayCardPanel = new javax.swing.JPanel();
        TermLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaField = new javax.swing.JTextArea();
        prevButton = new javax.swing.JButton();
        nextCard = new javax.swing.JButton();
        chooseDisplay = new javax.swing.JButton();
        savePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        termField = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        defField = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        cardAddButton = new javax.swing.JButton();
        chooseButton = new javax.swing.JButton();
        saveListButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        displayPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayPanelMouseClicked(evt);
            }
        });

        TermLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        TermLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TermLabel.setText("Term");

        TextAreaField.setEditable(false);
        TextAreaField.setColumns(20);
        TextAreaField.setLineWrap(true);
        TextAreaField.setRows(5);
        TextAreaField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextAreaFieldMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TextAreaField);

        prevButton.setText("Previous Card");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextCard.setText("Next Card");
        nextCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextCardActionPerformed(evt);
            }
        });

        chooseDisplay.setText("Choose File for Displayed Cards");
        chooseDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDisplayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayCardPanelLayout = new javax.swing.GroupLayout(displayCardPanel);
        displayCardPanel.setLayout(displayCardPanelLayout);
        displayCardPanelLayout.setHorizontalGroup(
            displayCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayCardPanelLayout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(TermLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
            .addGroup(displayCardPanelLayout.createSequentialGroup()
                .addGroup(displayCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(chooseDisplay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayCardPanelLayout.createSequentialGroup()
                        .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextCard, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        displayCardPanelLayout.setVerticalGroup(
            displayCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayCardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TermLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(displayCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(prevButton, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(nextCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayCardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayCardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        tabPanel.addTab("Flashcard Display", displayPanel);

        termField.setColumns(20);
        termField.setRows(5);
        jScrollPane1.setViewportView(termField);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Term");

        defField.setColumns(20);
        defField.setRows(5);
        jScrollPane3.setViewportView(defField);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Definition");
        jLabel2.setToolTipText("");

        cardAddButton.setText("Add Card to List");

        chooseButton.setText("Choose File");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        saveListButton.setText("Save List to File");
        saveListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout savePanelLayout = new javax.swing.GroupLayout(savePanel);
        savePanel.setLayout(savePanelLayout);
        savePanelLayout.setHorizontalGroup(
            savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(savePanelLayout.createSequentialGroup()
                .addGroup(savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(savePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(savePanelLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(cardAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(savePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        savePanelLayout.setVerticalGroup(
            savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(savePanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cardAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Create and Save Flashcards", savePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPanel))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPanel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        // TODO add your handling code here:
        //initialize integer to hold user input
        int fileSelection = 0;
        //get user input
        try {
            fileSelection = saveChooser.showSaveDialog(this);
        } catch (Exception e) {

        }
        //If user approves save
        if (fileSelection == JFileChooser.APPROVE_OPTION) {
            //set saveFile to the selected file
            saveFile = saveChooser.getSelectedFile();
            //If the file does not exist
            if (!saveFile.exists()) {
                //Create new file
                try {
                    saveFile.createNewFile();
                    //Obligatory catch
                } catch (IOException ex) {
                    //Error message
                    JOptionPane.showMessageDialog(this, "Couldn't create file: " + saveFile.getPath()
                            + "\nException Method:\n" + ex.getMessage(), "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            return;
        }
        try {
            selectedFile = saveFile.toString();
            fs = FileSystems.getDefault();
            pathToFile = fs.getPath(selectedFile);
            cardln = Files.newInputStream(pathToFile);
            cardReader = new BufferedReader(new InputStreamReader(cardln));

            //read the file
            while ((line = cardReader.readLine()) != null) {
                String data[] = line.split(",");
                aCard = new Flashcard();

                try {
                    aCard.setTerm(data[0]);
                    aCard.setDefinition(data[1]);

                    saveCards.add(aCard);

                } catch (NumberFormatException numberFormatException) {
                    //do nothing - skip the error
                    //eliminate problems with bad ids
                    //in reality you would fix this
                }
            }//end of while

            cardln.close();
            //JOptionPane.showMessageDialog(this, "Records read = " + contactList.size());
        } catch (IOException ex) {
            System.out.println("Cannont open " + pathToFile.getFileName());
            System.exit(1);
        }//end of catch

        showRecord();
    }//GEN-LAST:event_chooseButtonActionPerformed

    private void displayPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMouseClicked

    }//GEN-LAST:event_displayPanelMouseClicked

    private void TextAreaFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextAreaFieldMouseClicked
        // TODO add your handling code here:
        if (displayCards.size() != 0) {
            if (evt.getButton() == evt.BUTTON1) {
                //this.TermLabel.setText("Definition");
                this.TextAreaField.setText(displayCards.get(index).getDefinition());

            } else if (evt.getButton() == evt.BUTTON3) {
                //this.TermLabel.setText("Term");
                this.TextAreaField.setText(displayCards.get(index).getTerm());
            }
        }
    }//GEN-LAST:event_TextAreaFieldMouseClicked

    private void chooseDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDisplayActionPerformed
        // TODO add your handling code here:
        //initialize integer to hold user input
        int fileSelection = 0;
        //get user input
        try {
            fileSelection = saveChooser.showOpenDialog(this);
        } catch (Exception e) {

        }
        //If user approves save
        if (fileSelection == JFileChooser.APPROVE_OPTION) {
            //set saveFile to the selected file
            displayFile = saveChooser.getSelectedFile();
            //If the file does not exist
            if (!displayFile.exists()) {
                JOptionPane.showMessageDialog(this, "File " + displayFile.getPath() + " does not exist!", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else {
            return;
        }
        try {
            selectedFile = displayFile.toString();
            fs = FileSystems.getDefault();
            pathToFile = fs.getPath(selectedFile);
            cardln = Files.newInputStream(pathToFile);
            cardReader = new BufferedReader(new InputStreamReader(cardln));

            //read the file
            while ((line = cardReader.readLine()) != null) {
                String data[] = line.split(",");
                aCard = new Flashcard();

                try {
                    aCard.setTerm(data[0]);
                    aCard.setDefinition(data[1]);

                    displayCards.add(aCard);

                } catch (NumberFormatException numberFormatException) {
                    //do nothing - skip the error
                    //eliminate problems with bad ids
                    //in reality you would fix this
                }
            }//end of while

            cardln.close();
            //JOptionPane.showMessageDialog(this, "Records read = " + contactList.size());
        } catch (IOException ex) {
            System.out.println("Cannont open " + pathToFile.getFileName());
            System.exit(1);
        }
        showRecord();
    }//GEN-LAST:event_chooseDisplayActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        // TODO add your handling code here:
        if (displayCards.size() != 0) {
            index = Math.max(index - 1, 0);
            showRecord();
        }
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextCardActionPerformed
        // TODO add your handling code here:
        if (displayCards.size() != 0) {
            index = Math.min(index + 1, displayCards.size() - 1);
            showRecord();
        }
    }//GEN-LAST:event_nextCardActionPerformed

    private void saveListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveListButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveListButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlashcardFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlashcardFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlashcardFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlashcardFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlashcardFinal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TermLabel;
    private javax.swing.JTextArea TextAreaField;
    private javax.swing.JButton cardAddButton;
    private javax.swing.JButton chooseButton;
    private javax.swing.JButton chooseDisplay;
    private javax.swing.JTextArea defField;
    private javax.swing.JPanel displayCardPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton nextCard;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton saveListButton;
    private javax.swing.JPanel savePanel;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTextArea termField;
    // End of variables declaration//GEN-END:variables
}
